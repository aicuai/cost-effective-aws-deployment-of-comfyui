// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot test 1`] = `
{
  "Outputs": {
    "CognitoDomainName": {
      "Value": {
        "Ref": "AuthComfyUIuserPooluserpooldomainB15832FE",
      },
    },
    "Endpoint": {
      "Value": {
        "Fn::GetAtt": [
          "ALBComfyUIALB877B82C1",
          "DNSName",
        ],
      },
    },
    "UserPoolId": {
      "Value": {
        "Ref": "AuthComfyUIuserPoolC88ED331",
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61arm64C96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Default": "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-arm64",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
    "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2gpurecommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/gpu/recommended/image_id",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
  },
  "Resources": {
    "ALBALBSecurityGroup22DDF38C": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC23",
              "reason": "The Security Group and ALB needs to allow 0.0.0.0/0 inbound access for the ALB to be publicly accessible. Additional security is provided via Cognito authentication.",
            },
          ],
        },
      },
      "Properties": {
        "GroupDescription": "Security Group for ALB",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow inbound traffic on port 443",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
        ],
        "VpcId": {
          "Ref": "VPCCustomVPCFBCFDCBA",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ALBComfyUIALB877B82C1": {
      "DependsOn": [
        "VPCCustomVPCPublicSubnet1DefaultRouteA9E69F7E",
        "VPCCustomVPCPublicSubnet1RouteTableAssociation29A9330E",
        "VPCCustomVPCPublicSubnet2DefaultRoute1A566219",
        "VPCCustomVPCPublicSubnet2RouteTableAssociation00DF6088",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-ELB2",
              "reason": "Adding access logs requires extra S3 bucket so removing it for sample purposes.",
            },
          ],
        },
      },
      "Properties": {
        "LoadBalancerAttributes": [
          {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "ALBALBSecurityGroup22DDF38C",
              "GroupId",
            ],
          },
        ],
        "Subnets": [
          {
            "Ref": "VPCCustomVPCPublicSubnet1SubnetE7532862",
          },
          {
            "Ref": "VPCCustomVPCPublicSubnet2Subnet21404B7A",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "ALBComfyUIALBListenerAuthenticateRuleRuleD08C6D0C": {
      "Properties": {
        "Actions": [
          {
            "AuthenticateCognitoConfig": {
              "UserPoolArn": {
                "Fn::GetAtt": [
                  "AuthComfyUIuserPoolC88ED331",
                  "Arn",
                ],
              },
              "UserPoolClientId": {
                "Ref": "AuthComfyUIuserPoolalbappclientE4619A1C",
              },
              "UserPoolDomain": {
                "Ref": "AuthComfyUIuserPooluserpooldomainB15832FE",
              },
            },
            "Order": 1,
            "Type": "authenticate-cognito",
          },
          {
            "Order": 2,
            "TargetGroupArn": {
              "Ref": "ECSEcsTargetGroup2FE7947E",
            },
            "Type": "forward",
          },
        ],
        "Conditions": [
          {
            "Field": "path-pattern",
            "PathPatternConfig": {
              "Values": [
                "/*",
              ],
            },
          },
        ],
        "ListenerArn": {
          "Ref": "ALBComfyUIALBListenerE050EC1E",
        },
        "Priority": 25,
      },
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
    },
    "ALBComfyUIALBListenerE050EC1E": {
      "Properties": {
        "Certificates": [
          {
            "CertificateArn": {
              "Ref": "ALBSelfSignedCertCustomResourceA7F0DB1D",
            },
          },
        ],
        "DefaultActions": [
          {
            "TargetGroupArn": {
              "Ref": "ECSEcsTargetGroup2FE7947E",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": {
          "Ref": "ALBComfyUIALB877B82C1",
        },
        "Port": 443,
        "Protocol": "HTTPS",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "ALBComfyUIALBRedirect80To4436DBDA3AE": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-ELB2",
              "reason": "Adding access logs requires extra S3 bucket so removing it for sample purposes.",
            },
          ],
        },
      },
      "Properties": {
        "DefaultActions": [
          {
            "RedirectConfig": {
              "Port": "443",
              "Protocol": "HTTPS",
              "StatusCode": "HTTP_301",
            },
            "Type": "redirect",
          },
        ],
        "LoadBalancerArn": {
          "Ref": "ALBComfyUIALB877B82C1",
        },
        "Port": 80,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "ALBLambdaAdminRule9FA7AC6A": {
      "Properties": {
        "Actions": [
          {
            "AuthenticateCognitoConfig": {
              "UserPoolArn": {
                "Fn::GetAtt": [
                  "AuthComfyUIuserPoolC88ED331",
                  "Arn",
                ],
              },
              "UserPoolClientId": {
                "Ref": "AuthComfyUIuserPoolalbappclientE4619A1C",
              },
              "UserPoolDomain": {
                "Ref": "AuthComfyUIuserPooluserpooldomainB15832FE",
              },
            },
            "Order": 1,
            "Type": "authenticate-cognito",
          },
          {
            "Order": 2,
            "TargetGroupArn": {
              "Ref": "AdminLambdaAdminTargetGroupB3AA71E3",
            },
            "Type": "forward",
          },
        ],
        "Conditions": [
          {
            "Field": "path-pattern",
            "PathPatternConfig": {
              "Values": [
                "/admin",
              ],
            },
          },
        ],
        "ListenerArn": {
          "Ref": "ALBComfyUIALBListenerE050EC1E",
        },
        "Priority": 5,
      },
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
    },
    "ALBLambdaRestartDockerRuleC26335A1": {
      "Properties": {
        "Actions": [
          {
            "AuthenticateCognitoConfig": {
              "UserPoolArn": {
                "Fn::GetAtt": [
                  "AuthComfyUIuserPoolC88ED331",
                  "Arn",
                ],
              },
              "UserPoolClientId": {
                "Ref": "AuthComfyUIuserPoolalbappclientE4619A1C",
              },
              "UserPoolDomain": {
                "Ref": "AuthComfyUIuserPooluserpooldomainB15832FE",
              },
            },
            "Order": 1,
            "Type": "authenticate-cognito",
          },
          {
            "Order": 2,
            "TargetGroupArn": {
              "Ref": "AdminLambdaRestartDockerTargetGroup57762731",
            },
            "Type": "forward",
          },
        ],
        "Conditions": [
          {
            "Field": "path-pattern",
            "PathPatternConfig": {
              "Values": [
                "/admin/restart",
              ],
            },
          },
        ],
        "ListenerArn": {
          "Ref": "ALBComfyUIALBListenerE050EC1E",
        },
        "Priority": 10,
      },
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
    },
    "ALBLambdaScaleupRule2E188D8C": {
      "Properties": {
        "Actions": [
          {
            "AuthenticateCognitoConfig": {
              "UserPoolArn": {
                "Fn::GetAtt": [
                  "AuthComfyUIuserPoolC88ED331",
                  "Arn",
                ],
              },
              "UserPoolClientId": {
                "Ref": "AuthComfyUIuserPoolalbappclientE4619A1C",
              },
              "UserPoolDomain": {
                "Ref": "AuthComfyUIuserPooluserpooldomainB15832FE",
              },
            },
            "Order": 1,
            "Type": "authenticate-cognito",
          },
          {
            "Order": 2,
            "TargetGroupArn": {
              "Ref": "AdminLambdaScaleupTargetGroupF9F1A683",
            },
            "Type": "forward",
          },
        ],
        "Conditions": [
          {
            "Field": "path-pattern",
            "PathPatternConfig": {
              "Values": [
                "/admin/scaleup",
              ],
            },
          },
        ],
        "ListenerArn": {
          "Ref": "ALBComfyUIALBListenerE050EC1E",
        },
        "Priority": 20,
      },
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
    },
    "ALBLambdaShutdownRuleBDB7D9F8": {
      "Properties": {
        "Actions": [
          {
            "AuthenticateCognitoConfig": {
              "UserPoolArn": {
                "Fn::GetAtt": [
                  "AuthComfyUIuserPoolC88ED331",
                  "Arn",
                ],
              },
              "UserPoolClientId": {
                "Ref": "AuthComfyUIuserPoolalbappclientE4619A1C",
              },
              "UserPoolDomain": {
                "Ref": "AuthComfyUIuserPooluserpooldomainB15832FE",
              },
            },
            "Order": 1,
            "Type": "authenticate-cognito",
          },
          {
            "Order": 2,
            "TargetGroupArn": {
              "Ref": "AdminLambdaShutdownTargetGroupF34ECDC7",
            },
            "Type": "forward",
          },
        ],
        "Conditions": [
          {
            "Field": "path-pattern",
            "PathPatternConfig": {
              "Values": [
                "/admin/shutdown",
              ],
            },
          },
        ],
        "ListenerArn": {
          "Ref": "ALBComfyUIALBListenerE050EC1E",
        },
        "Priority": 15,
      },
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
    },
    "ALBRegisterSelfSignedCertDAF470C3": {
      "DependsOn": [
        "ALBRegisterSelfSignedCertServiceRoleDefaultPolicyAB6B481A",
        "ALBRegisterSelfSignedCertServiceRoleD27ECAAB",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-000000000000-us-west-2",
          "S3Key": "fe803e4400f5ad79c7a8e21c2539cecc0828543481b12f91d584186477c4ef6e.zip",
        },
        "Handler": "function.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "ALBRegisterSelfSignedCertServiceRoleD27ECAAB",
            "Arn",
          ],
        },
        "Runtime": "python3.10",
        "Timeout": 120,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ALBRegisterSelfSignedCertServiceRoleD27ECAAB": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ALBRegisterSelfSignedCertServiceRoleDefaultPolicyAB6B481A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "acm:ImportCertificate",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "acm:AddTagsToCertificate",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "acm:DeleteCertificate",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ALBRegisterSelfSignedCertServiceRoleDefaultPolicyAB6B481A",
        "Roles": [
          {
            "Ref": "ALBRegisterSelfSignedCertServiceRoleD27ECAAB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ALBSelfSignedCertCustomResourceA7F0DB1D": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ALBSelfSignedCertCustomResourceProviderframeworkonEvent1D670B0B",
            "Arn",
          ],
        },
        "city": ".",
        "common_name": "*.elb.amazonaws.com",
        "country_code": "AT",
        "email_address": "customer@example.com",
        "organization": ".",
        "organizational_unit": ".",
        "state": ".",
        "validity_seconds": 157680000,
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "ALBSelfSignedCertCustomResourceProviderframeworkonEvent1D670B0B": {
      "DependsOn": [
        "ALBSelfSignedCertCustomResourceProviderframeworkonEventServiceRoleDefaultPolicy27BA2CDF",
        "ALBSelfSignedCertCustomResourceProviderframeworkonEventServiceRole2572F6B5",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-000000000000-us-west-2",
          "S3Key": "4dc48ffba382f93077a1e6824599bbd4ceb6f91eb3d9442eca3b85bdb1a20b1e.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (TestStack/ALB/SelfSignedCertCustomResourceProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ALBRegisterSelfSignedCertDAF470C3",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ALBSelfSignedCertCustomResourceProviderframeworkonEventServiceRole2572F6B5",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ALBSelfSignedCertCustomResourceProviderframeworkonEventServiceRole2572F6B5": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ALBSelfSignedCertCustomResourceProviderframeworkonEventServiceRoleDefaultPolicy27BA2CDF": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ALBRegisterSelfSignedCertDAF470C3",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ALBRegisterSelfSignedCertDAF470C3",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ALBSelfSignedCertCustomResourceProviderframeworkonEventServiceRoleDefaultPolicy27BA2CDF",
        "Roles": [
          {
            "Ref": "ALBSelfSignedCertCustomResourceProviderframeworkonEventServiceRole2572F6B5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ASG8C5634EF": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Lambda Runtime is provided by custom resource provider and drain ecs hook implicitely and not critical for sample",
            },
            {
              "id": "AwsSolutions-AS3",
              "reason": "Not all notifications are critical for ComfyUI sample",
            },
            {
              "id": "AwsSolutions-SNS2",
              "reason": "SNS topic is implicitly created by LifeCycleActions and is not critical for sample purposes.",
            },
            {
              "id": "AwsSolutions-SNS3",
              "reason": "SNS topic is implicitly created by LifeCycleActions and is not critical for sample purposes.",
            },
          ],
        },
      },
      "Properties": {
        "DesiredCapacity": "1",
        "MaxSize": "1",
        "MinSize": "0",
        "MixedInstancesPolicy": {
          "InstancesDistribution": {
            "OnDemandAllocationStrategy": "lowest-price",
            "OnDemandBaseCapacity": 0,
            "OnDemandPercentageAboveBaseCapacity": 0,
            "SpotAllocationStrategy": "lowest-price",
            "SpotInstancePools": 1,
            "SpotMaxPrice": "0.752",
          },
          "LaunchTemplate": {
            "LaunchTemplateSpecification": {
              "LaunchTemplateId": {
                "Ref": "ASGHostC59282A6",
              },
              "Version": {
                "Fn::GetAtt": [
                  "ASGHostC59282A6",
                  "LatestVersionNumber",
                ],
              },
            },
            "Overrides": [
              {
                "InstanceType": "g4dn.xlarge",
              },
              {
                "InstanceType": "g5.xlarge",
              },
              {
                "InstanceType": "g6.xlarge",
              },
              {
                "InstanceType": "g4dn.2xlarge",
              },
              {
                "InstanceType": "g5.2xlarge",
              },
              {
                "InstanceType": "g6.2xlarge",
              },
            ],
          },
        },
        "NewInstancesProtectedFromScaleIn": false,
        "VPCZoneIdentifier": [
          {
            "Ref": "VPCCustomVPCPrivateSubnet1Subnet87B57245",
          },
          {
            "Ref": "VPCCustomVPCPrivateSubnet2SubnetF93FDD10",
          },
        ],
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingScheduledAction": {
          "IgnoreUnmodifiedGroupSizeProperties": true,
        },
      },
      "UpdateReplacePolicy": "Delete",
    },
    "ASGAsgSecurityGroup090A8E6A": {
      "Properties": {
        "GroupDescription": "Security Group for ASG",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "VPCCustomVPCFBCFDCBA",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ASGCPUUtilizationAlarmE604FFE7": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "ASGScalingAction522CD709",
          },
        ],
        "ComparisonOperator": "LessThanThreshold",
        "DatapointsToAlarm": 60,
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "ASG8C5634EF",
            },
          },
        ],
        "EvaluationPeriods": 60,
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ASGDrainECSHookFunctionAllowInvokeTestStackASGLifecycleHookDrainHookTopic591CBEA16ECFDC25": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SNS2",
              "reason": "SNS topic is implicitly created by LifeCycleActions and is not critical for sample purposes.",
            },
            {
              "id": "AwsSolutions-SNS3",
              "reason": "SNS topic is implicitly created by LifeCycleActions and is not critical for sample purposes.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ASGDrainECSHookFunctionC1D0603A",
            "Arn",
          ],
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "ASGLifecycleHookDrainHookTopic147AD675",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ASGDrainECSHookFunctionC1D0603A": {
      "DependsOn": [
        "ASGDrainECSHookFunctionServiceRoleDefaultPolicyD625DB7F",
        "ASGDrainECSHookFunctionServiceRole60280BE1",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SNS2",
              "reason": "SNS topic is implicitly created by LifeCycleActions and is not critical for sample purposes.",
            },
            {
              "id": "AwsSolutions-SNS3",
              "reason": "SNS topic is implicitly created by LifeCycleActions and is not critical for sample purposes.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "ZipFile": "import boto3, json, os, time

ecs = boto3.client('ecs')
autoscaling = boto3.client('autoscaling')


def lambda_handler(event, context):
  print(json.dumps(dict(event, ResponseURL='...')))
  cluster = os.environ['CLUSTER']
  snsTopicArn = event['Records'][0]['Sns']['TopicArn']
  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
  instance_id = lifecycle_event.get('EC2InstanceId')
  if not instance_id:
    print('Got event without EC2InstanceId: %s', json.dumps(dict(event, ResponseURL='...')))
    return

  instance_arn = container_instance_arn(cluster, instance_id)
  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

  if not instance_arn:
    return

  task_arns = container_instance_task_arns(cluster, instance_arn)

  if task_arns:
    print('Instance ARN %s has task ARNs %s' % (instance_arn, ', '.join(task_arns)))

  while has_tasks(cluster, instance_arn, task_arns):
    time.sleep(10)

  try:
    print('Terminating instance %s' % instance_id)
    autoscaling.complete_lifecycle_action(
        LifecycleActionResult='CONTINUE',
        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
  except Exception as e:
    # Lifecycle action may have already completed.
    print(str(e))


def container_instance_arn(cluster, instance_id):
  """Turn an instance ID into a container instance ARN."""
  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
  if not arns:
    return None
  return arns[0]

def container_instance_task_arns(cluster, instance_arn):
  """Fetch tasks for a container instance ARN."""
  arns = ecs.list_tasks(cluster=cluster, containerInstance=instance_arn)['taskArns']
  return arns

def has_tasks(cluster, instance_arn, task_arns):
  """Return True if the instance is running tasks for the given cluster."""
  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
  if not instances:
    return False
  instance = instances[0]

  if instance['status'] == 'ACTIVE':
    # Start draining, then try again later
    set_container_instance_to_draining(cluster, instance_arn)
    return True

  task_count = None

  if task_arns:
    # Fetch details for tasks running on the container instance
    tasks = ecs.describe_tasks(cluster=cluster, tasks=task_arns)['tasks']
    if tasks:
      # Consider any non-stopped tasks as running
      task_count = sum(task['lastStatus'] != 'STOPPED' for task in tasks) + instance['pendingTasksCount']

  if not task_count:
    # Fallback to instance task counts if detailed task information is unavailable
    task_count = instance['runningTasksCount'] + instance['pendingTasksCount']

  print('Instance %s has %s tasks' % (instance_arn, task_count))

  return task_count > 0

def set_container_instance_to_draining(cluster, instance_arn):
  ecs.update_container_instances_state(
      cluster=cluster,
      containerInstances=[instance_arn], status='DRAINING')


def pick(dct, *keys):
  """Pick a subset of a dict."""
  return {k: v for k, v in dct.items() if k in keys}
",
        },
        "Environment": {
          "Variables": {
            "CLUSTER": {
              "Ref": "ECSComfyUICluster424B7B27",
            },
          },
        },
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "ASGDrainECSHookFunctionServiceRole60280BE1",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 310,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ASGDrainECSHookFunctionServiceRole60280BE1": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SNS2",
              "reason": "SNS topic is implicitly created by LifeCycleActions and is not critical for sample purposes.",
            },
            {
              "id": "AwsSolutions-SNS3",
              "reason": "SNS topic is implicitly created by LifeCycleActions and is not critical for sample purposes.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ASGDrainECSHookFunctionServiceRoleDefaultPolicyD625DB7F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SNS2",
              "reason": "SNS topic is implicitly created by LifeCycleActions and is not critical for sample purposes.",
            },
            {
              "id": "AwsSolutions-SNS3",
              "reason": "SNS topic is implicitly created by LifeCycleActions and is not critical for sample purposes.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeHosts",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "autoscaling:CompleteLifecycleAction",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":autoscaling:us-west-2:000000000000:autoScalingGroup:*:autoScalingGroupName/",
                    {
                      "Ref": "ASG8C5634EF",
                    },
                  ],
                ],
              },
            },
            {
              "Action": [
                "ecs:DescribeContainerInstances",
                "ecs:DescribeTasks",
              ],
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "ECSComfyUICluster424B7B27",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecs:ListContainerInstances",
                "ecs:SubmitContainerStateChange",
                "ecs:SubmitTaskStateChange",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ECSComfyUICluster424B7B27",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "ecs:UpdateContainerInstancesState",
                "ecs:ListTasks",
              ],
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "ECSComfyUICluster424B7B27",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ASGDrainECSHookFunctionServiceRoleDefaultPolicyD625DB7F",
        "Roles": [
          {
            "Ref": "ASGDrainECSHookFunctionServiceRole60280BE1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ASGDrainECSHookFunctionTopic059F127B": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SNS2",
              "reason": "SNS topic is implicitly created by LifeCycleActions and is not critical for sample purposes.",
            },
            {
              "id": "AwsSolutions-SNS3",
              "reason": "SNS topic is implicitly created by LifeCycleActions and is not critical for sample purposes.",
            },
          ],
        },
      },
      "Properties": {
        "Endpoint": {
          "Fn::GetAtt": [
            "ASGDrainECSHookFunctionC1D0603A",
            "Arn",
          ],
        },
        "Protocol": "lambda",
        "TopicArn": {
          "Ref": "ASGLifecycleHookDrainHookTopic147AD675",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "ASGEC2Role7D0D606B": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonEC2FullAccess",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMManagedEC2InstanceDefaultPolicy",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ASGEC2RoleDefaultPolicy25F96876": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecs:DeregisterContainerInstance",
                "ecs:RegisterContainerInstance",
                "ecs:Submit*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ECSComfyUICluster424B7B27",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "ecs:Poll",
                "ecs:StartTelemetrySession",
              ],
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "ECSComfyUICluster424B7B27",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecs:DiscoverPollEndpoint",
                "ecr:GetAuthorizationToken",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ASGEC2RoleDefaultPolicy25F96876",
        "Roles": [
          {
            "Ref": "ASGEC2Role7D0D606B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ASGHostC59282A6": {
      "DependsOn": [
        "ASGEC2RoleDefaultPolicy25F96876",
        "ASGEC2Role7D0D606B",
      ],
      "Properties": {
        "LaunchTemplateData": {
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/xvda",
              "Ebs": {
                "Encrypted": true,
                "VolumeSize": 50,
              },
            },
          ],
          "IamInstanceProfile": {
            "Arn": {
              "Fn::GetAtt": [
                "ASGHostProfile1B783AF8",
                "Arn",
              ],
            },
          },
          "ImageId": {
            "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2gpurecommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "ASGAsgSecurityGroup090A8E6A",
                "GroupId",
              ],
            },
          ],
          "TagSpecifications": [
            {
              "ResourceType": "instance",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "TestStack/ASG/Host",
                },
              ],
            },
            {
              "ResourceType": "volume",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "TestStack/ASG/Host",
                },
              ],
            },
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash

      #!/bin/bash
      REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/region)
      docker plugin install rexray/ebs --grant-all-permissions REXRAY_PREEMPT=true EBS_REGION=$REGION
      systemctl restart docker
    
echo ECS_CLUSTER=",
                  {
                    "Ref": "ECSComfyUICluster424B7B27",
                  },
                  " >> /etc/ecs/ecs.config
sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
sudo service iptables save
echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config",
                ],
              ],
            },
          },
        },
        "TagSpecifications": [
          {
            "ResourceType": "launch-template",
            "Tags": [
              {
                "Key": "Name",
                "Value": "TestStack/ASG/Host",
              },
            ],
          },
        ],
      },
      "Type": "AWS::EC2::LaunchTemplate",
    },
    "ASGHostProfile1B783AF8": {
      "Properties": {
        "Roles": [
          {
            "Ref": "ASGEC2Role7D0D606B",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "ASGLifecycleHookDrainHook5A103744": {
      "DependsOn": [
        "ASGLifecycleHookDrainHookRoleDefaultPolicyAB47AE20",
        "ASGLifecycleHookDrainHookRole429D7219",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SNS2",
              "reason": "SNS topic is implicitly created by LifeCycleActions and is not critical for sample purposes.",
            },
            {
              "id": "AwsSolutions-SNS3",
              "reason": "SNS topic is implicitly created by LifeCycleActions and is not critical for sample purposes.",
            },
          ],
        },
      },
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "ASG8C5634EF",
        },
        "DefaultResult": "CONTINUE",
        "HeartbeatTimeout": 300,
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": {
          "Ref": "ASGLifecycleHookDrainHookTopic147AD675",
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "ASGLifecycleHookDrainHookRole429D7219",
            "Arn",
          ],
        },
      },
      "Type": "AWS::AutoScaling::LifecycleHook",
    },
    "ASGLifecycleHookDrainHookRole429D7219": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SNS2",
              "reason": "SNS topic is implicitly created by LifeCycleActions and is not critical for sample purposes.",
            },
            {
              "id": "AwsSolutions-SNS3",
              "reason": "SNS topic is implicitly created by LifeCycleActions and is not critical for sample purposes.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "autoscaling.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ASGLifecycleHookDrainHookRoleDefaultPolicyAB47AE20": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SNS2",
              "reason": "SNS topic is implicitly created by LifeCycleActions and is not critical for sample purposes.",
            },
            {
              "id": "AwsSolutions-SNS3",
              "reason": "SNS topic is implicitly created by LifeCycleActions and is not critical for sample purposes.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "ASGLifecycleHookDrainHookTopic147AD675",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ASGLifecycleHookDrainHookRoleDefaultPolicyAB47AE20",
        "Roles": [
          {
            "Ref": "ASGLifecycleHookDrainHookRole429D7219",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ASGLifecycleHookDrainHookTopic147AD675": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-SNS2",
              "reason": "SNS topic is implicitly created by LifeCycleActions and is not critical for sample purposes.",
            },
            {
              "id": "AwsSolutions-SNS3",
              "reason": "SNS topic is implicitly created by LifeCycleActions and is not critical for sample purposes.",
            },
          ],
        },
      },
      "Type": "AWS::SNS::Topic",
    },
    "ASGScalingAction522CD709": {
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "ASG8C5634EF",
        },
        "PolicyType": "StepScaling",
        "StepAdjustments": [
          {
            "MetricIntervalUpperBound": 1,
            "ScalingAdjustment": -1,
          },
          {
            "MetricIntervalLowerBound": 1,
            "ScalingAdjustment": 0,
          },
        ],
      },
      "Type": "AWS::AutoScaling::ScalingPolicy",
    },
    "AdminAdminFunctionE2D867CC": {
      "DependsOn": [
        "AdminLambdaExecutionRoleDefaultPolicy23A774EA",
        "AdminLambdaExecutionRole21C714A9",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-000000000000-us-west-2",
          "S3Key": "a22b2ebd0dd0ddae16ed62cd560b9ececb790bdd7eb0fec745c676e78a05f533.zip",
        },
        "Environment": {
          "Variables": {
            "ASG_NAME": {
              "Ref": "ASG8C5634EF",
            },
            "ECS_CLUSTER_NAME": {
              "Ref": "ECSComfyUICluster424B7B27",
            },
            "ECS_SERVICE_NAME": {
              "Fn::GetAtt": [
                "ECSComfyUIService8BA6085B",
                "Name",
              ],
            },
          },
        },
        "Handler": "admin.handler",
        "Role": {
          "Fn::GetAtt": [
            "AdminLambdaExecutionRole21C714A9",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AdminAdminFunctionInvoke2UTWxhlfyqbT5FTn5jvgbLgjFfJwzswGk55DU1HY4C94D7BF": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminAdminFunctionE2D867CC",
            "Arn",
          ],
        },
        "Principal": "elasticloadbalancing.amazonaws.com",
      },
      "Type": "AWS::Lambda::Permission",
    },
    "AdminEcsTaskStateChangeRule2B59625A": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "ECSComfyUICluster424B7B27",
                  "Arn",
                ],
              },
            ],
            "lastStatus": [
              "RUNNING",
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "AdminScaleupListenerFunctionB468CBFE",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "AdminEcsTaskStateChangeRuleAllowEventRuleTestStackAdminScaleupListenerFunction0FCE7FB5054E1E40": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminScaleupListenerFunctionB468CBFE",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "AdminEcsTaskStateChangeRule2B59625A",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "AdminLambdaAdminTargetGroupB3AA71E3": {
      "DependsOn": [
        "AdminAdminFunctionInvoke2UTWxhlfyqbT5FTn5jvgbLgjFfJwzswGk55DU1HY4C94D7BF",
      ],
      "Properties": {
        "TargetType": "lambda",
        "Targets": [
          {
            "Id": {
              "Fn::GetAtt": [
                "AdminAdminFunctionE2D867CC",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "AdminLambdaExecutionRole21C714A9": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AutoScalingFullAccess",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AdminLambdaExecutionRoleDefaultPolicy23A774EA": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecs:DescribeServices",
                "ecs:ListTasks",
                "elasticloadbalancing:ModifyListener",
                "elasticloadbalancing:ModifyRule",
                "elasticloadbalancing:DescribeRules",
                "elasticloadbalancing:DescribeListeners",
                "ecs:UpdateService",
                "ssm:SendCommand",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AdminLambdaExecutionRoleDefaultPolicy23A774EA",
        "Roles": [
          {
            "Ref": "AdminLambdaExecutionRole21C714A9",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AdminLambdaRestartDockerTargetGroup57762731": {
      "DependsOn": [
        "AdminRestartDockerFunctionInvoke2UTWxhlfyqbT5FTn5jvgbLgjFfJwzswGk55DU1HYC0FAA910",
      ],
      "Properties": {
        "TargetType": "lambda",
        "Targets": [
          {
            "Id": {
              "Fn::GetAtt": [
                "AdminRestartDockerFunction32759383",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "AdminLambdaScaleupTargetGroupF9F1A683": {
      "DependsOn": [
        "AdminScaleUpTriggerFunctionInvoke2UTWxhlfyqbT5FTn5jvgbLgjFfJwzswGk55DU1HYD4F32900",
      ],
      "Properties": {
        "TargetType": "lambda",
        "Targets": [
          {
            "Id": {
              "Fn::GetAtt": [
                "AdminScaleUpTriggerFunction1AB6CE53",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "AdminLambdaShutdownTargetGroupF34ECDC7": {
      "DependsOn": [
        "AdminShutdownFunctionInvoke2UTWxhlfyqbT5FTn5jvgbLgjFfJwzswGk55DU1HY7B16F48F",
      ],
      "Properties": {
        "TargetType": "lambda",
        "Targets": [
          {
            "Id": {
              "Fn::GetAtt": [
                "AdminShutdownFunction0F4CA812",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "AdminRestartDockerFunction32759383": {
      "DependsOn": [
        "AdminLambdaExecutionRoleDefaultPolicy23A774EA",
        "AdminLambdaExecutionRole21C714A9",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-000000000000-us-west-2",
          "S3Key": "a22b2ebd0dd0ddae16ed62cd560b9ececb790bdd7eb0fec745c676e78a05f533.zip",
        },
        "Environment": {
          "Variables": {
            "ASG_NAME": {
              "Ref": "ASG8C5634EF",
            },
            "ECS_CLUSTER_NAME": {
              "Ref": "ECSComfyUICluster424B7B27",
            },
            "ECS_SERVICE_NAME": {
              "Fn::GetAtt": [
                "ECSComfyUIService8BA6085B",
                "Name",
              ],
            },
            "LISTENER_RULE_ARN": {
              "Ref": "ALBLambdaAdminRule9FA7AC6A",
            },
          },
        },
        "Handler": "restart_docker.handler",
        "Role": {
          "Fn::GetAtt": [
            "AdminLambdaExecutionRole21C714A9",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AdminRestartDockerFunctionInvoke2UTWxhlfyqbT5FTn5jvgbLgjFfJwzswGk55DU1HYC0FAA910": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminRestartDockerFunction32759383",
            "Arn",
          ],
        },
        "Principal": "elasticloadbalancing.amazonaws.com",
      },
      "Type": "AWS::Lambda::Permission",
    },
    "AdminScaleInEventRule4E024424": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "AutoScalingGroupName": [
              {
                "Ref": "ASG8C5634EF",
              },
            ],
          },
          "detail-type": [
            "EC2 Instance-terminate Lifecycle Action",
          ],
          "source": [
            "aws.autoscaling",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "AdminScaleinListenerFunction60D28019",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "AdminScaleInEventRuleAllowEventRuleTestStackAdminScaleinListenerFunction2947C91655404F67": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminScaleinListenerFunction60D28019",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "AdminScaleInEventRule4E024424",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "AdminScaleUpTriggerFunction1AB6CE53": {
      "DependsOn": [
        "AdminLambdaExecutionRoleDefaultPolicy23A774EA",
        "AdminLambdaExecutionRole21C714A9",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-000000000000-us-west-2",
          "S3Key": "a22b2ebd0dd0ddae16ed62cd560b9ececb790bdd7eb0fec745c676e78a05f533.zip",
        },
        "Environment": {
          "Variables": {
            "ASG_NAME": {
              "Ref": "ASG8C5634EF",
            },
            "ECS_CLUSTER_NAME": {
              "Ref": "ECSComfyUICluster424B7B27",
            },
            "ECS_SERVICE_NAME": {
              "Fn::GetAtt": [
                "ECSComfyUIService8BA6085B",
                "Name",
              ],
            },
          },
        },
        "Handler": "scaleup_trigger.handler",
        "Role": {
          "Fn::GetAtt": [
            "AdminLambdaExecutionRole21C714A9",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AdminScaleUpTriggerFunctionInvoke2UTWxhlfyqbT5FTn5jvgbLgjFfJwzswGk55DU1HYD4F32900": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminScaleUpTriggerFunction1AB6CE53",
            "Arn",
          ],
        },
        "Principal": "elasticloadbalancing.amazonaws.com",
      },
      "Type": "AWS::Lambda::Permission",
    },
    "AdminScaleinListenerFunction60D28019": {
      "DependsOn": [
        "AdminLambdaExecutionRoleDefaultPolicy23A774EA",
        "AdminLambdaExecutionRole21C714A9",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-000000000000-us-west-2",
          "S3Key": "a22b2ebd0dd0ddae16ed62cd560b9ececb790bdd7eb0fec745c676e78a05f533.zip",
        },
        "Environment": {
          "Variables": {
            "ASG_NAME": {
              "Ref": "ASG8C5634EF",
            },
            "LISTENER_RULE_ARN": {
              "Ref": "ALBLambdaAdminRule9FA7AC6A",
            },
          },
        },
        "Handler": "scalein_listener.handler",
        "Role": {
          "Fn::GetAtt": [
            "AdminLambdaExecutionRole21C714A9",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AdminScaleupListenerFunctionB468CBFE": {
      "DependsOn": [
        "AdminLambdaExecutionRoleDefaultPolicy23A774EA",
        "AdminLambdaExecutionRole21C714A9",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-000000000000-us-west-2",
          "S3Key": "a22b2ebd0dd0ddae16ed62cd560b9ececb790bdd7eb0fec745c676e78a05f533.zip",
        },
        "Environment": {
          "Variables": {
            "ASG_NAME": {
              "Ref": "ASG8C5634EF",
            },
            "ECS_CLUSTER_NAME": {
              "Ref": "ECSComfyUICluster424B7B27",
            },
            "ECS_SERVICE_NAME": {
              "Fn::GetAtt": [
                "ECSComfyUIService8BA6085B",
                "Name",
              ],
            },
            "LISTENER_RULE_ARN": {
              "Ref": "ALBLambdaAdminRule9FA7AC6A",
            },
          },
        },
        "Handler": "scaleup_listener.handler",
        "Role": {
          "Fn::GetAtt": [
            "AdminLambdaExecutionRole21C714A9",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AdminShutdownFunction0F4CA812": {
      "DependsOn": [
        "AdminLambdaExecutionRoleDefaultPolicy23A774EA",
        "AdminLambdaExecutionRole21C714A9",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-000000000000-us-west-2",
          "S3Key": "a22b2ebd0dd0ddae16ed62cd560b9ececb790bdd7eb0fec745c676e78a05f533.zip",
        },
        "Environment": {
          "Variables": {
            "ASG_NAME": {
              "Ref": "ASG8C5634EF",
            },
          },
        },
        "Handler": "shutdown.handler",
        "Role": {
          "Fn::GetAtt": [
            "AdminLambdaExecutionRole21C714A9",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AdminShutdownFunctionInvoke2UTWxhlfyqbT5FTn5jvgbLgjFfJwzswGk55DU1HY7B16F48F": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminShutdownFunction0F4CA812",
            "Arn",
          ],
        },
        "Principal": "elasticloadbalancing.amazonaws.com",
      },
      "Type": "AWS::Lambda::Permission",
    },
    "AuthComfyUIuserPoolC88ED331": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AccountRecoverySetting": {
          "RecoveryMechanisms": [
            {
              "Name": "verified_email",
              "Priority": 1,
            },
            {
              "Name": "verified_phone_number",
              "Priority": 2,
            },
          ],
        },
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": true,
        },
        "AutoVerifiedAttributes": [
          "email",
          "phone_number",
        ],
        "EmailVerificationMessage": "The verification code to your new account is {####}",
        "EmailVerificationSubject": "Verify your new account",
        "EnabledMfas": [
          "SMS_MFA",
          "SOFTWARE_TOKEN_MFA",
        ],
        "MfaConfiguration": "OPTIONAL",
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": 12,
            "RequireNumbers": true,
            "RequireSymbols": true,
            "RequireUppercase": true,
          },
        },
        "Schema": [
          {
            "Mutable": true,
            "Name": "email",
            "Required": true,
          },
          {
            "Mutable": true,
            "Name": "given_name",
            "Required": true,
          },
          {
            "Mutable": true,
            "Name": "family_name",
            "Required": true,
          },
        ],
        "SmsConfiguration": {
          "ExternalId": "TestStackAuthComfyUIuserPool6BC4A069",
          "SnsCallerArn": {
            "Fn::GetAtt": [
              "AuthComfyUIuserPoolsmsRole3C01AC1F",
              "Arn",
            ],
          },
        },
        "SmsVerificationMessage": "The verification code to your new account is {####}",
        "UserPoolAddOns": {
          "AdvancedSecurityMode": "ENFORCED",
        },
        "VerificationMessageTemplate": {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "The verification code to your new account is {####}",
          "EmailSubject": "Verify your new account",
          "SmsMessage": "The verification code to your new account is {####}",
        },
      },
      "Type": "AWS::Cognito::UserPool",
      "UpdateReplacePolicy": "Retain",
    },
    "AuthComfyUIuserPoolalbappclientE4619A1C": {
      "Properties": {
        "AllowedOAuthFlows": [
          "code",
        ],
        "AllowedOAuthFlowsUserPoolClient": true,
        "AllowedOAuthScopes": [
          "openid",
        ],
        "CallbackURLs": [
          {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Fn::GetAtt": [
                    "ALBComfyUIALB877B82C1",
                    "DNSName",
                  ],
                },
                "/oauth2/idpresponse",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Fn::GetAtt": [
                    "ALBComfyUIALB877B82C1",
                    "DNSName",
                  ],
                },
              ],
            ],
          },
        ],
        "GenerateSecret": true,
        "LogoutURLs": [
          {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Fn::GetAtt": [
                    "ALBComfyUIALB877B82C1",
                    "DNSName",
                  ],
                },
              ],
            ],
          },
        ],
        "SupportedIdentityProviders": [
          "COGNITO",
        ],
        "UserPoolId": {
          "Ref": "AuthComfyUIuserPoolC88ED331",
        },
      },
      "Type": "AWS::Cognito::UserPoolClient",
    },
    "AuthComfyUIuserPoolsmsRole3C01AC1F": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "TestStackAuthComfyUIuserPool6BC4A069",
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "cognito-idp.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "sns:Publish",
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "sns-publish",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AuthComfyUIuserPooluserpooldomainB15832FE": {
      "Properties": {
        "Domain": "comfyui-alb-auth-0b925f9579",
        "UserPoolId": {
          "Ref": "AuthComfyUIuserPoolC88ED331",
        },
      },
      "Type": "AWS::Cognito::UserPoolDomain",
    },
    "AuthUpdateCognitoCallbackUrl8A6272CA": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "AuthUpdateCognitoCallbackUrlProviderframeworkonEventE6181359",
            "Arn",
          ],
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "AuthUpdateCognitoCallbackUrlFunction6078231D": {
      "DependsOn": [
        "AuthUpdateCognitoCallbackUrlFunctionServiceRoleDefaultPolicy97FC63DB",
        "AuthUpdateCognitoCallbackUrlFunctionServiceRole85EBBEE1",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-000000000000-us-west-2",
          "S3Key": "ad389d1f9e1a2476ee176568349afc1f525219f7cea4842c50fbad43cae7acd2.zip",
        },
        "Environment": {
          "Variables": {
            "COGNITO_CLIENT_ID": {
              "Ref": "AuthComfyUIuserPoolalbappclientE4619A1C",
            },
            "COGNITO_USER_POOL_ID": {
              "Ref": "AuthComfyUIuserPoolC88ED331",
            },
          },
        },
        "Handler": "function.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "AuthUpdateCognitoCallbackUrlFunctionServiceRole85EBBEE1",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
      },
      "Type": "AWS::Lambda::Function",
    },
    "AuthUpdateCognitoCallbackUrlFunctionServiceRole85EBBEE1": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AuthUpdateCognitoCallbackUrlFunctionServiceRoleDefaultPolicy97FC63DB": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "cognito-idp:DescribeUserPoolClient",
                "cognito-idp:UpdateUserPoolClient",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AuthUpdateCognitoCallbackUrlFunctionServiceRoleDefaultPolicy97FC63DB",
        "Roles": [
          {
            "Ref": "AuthUpdateCognitoCallbackUrlFunctionServiceRole85EBBEE1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AuthUpdateCognitoCallbackUrlProviderframeworkonEventE6181359": {
      "DependsOn": [
        "AuthUpdateCognitoCallbackUrlProviderframeworkonEventServiceRoleDefaultPolicy6583B853",
        "AuthUpdateCognitoCallbackUrlProviderframeworkonEventServiceRole571A3BB1",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-000000000000-us-west-2",
          "S3Key": "4dc48ffba382f93077a1e6824599bbd4ceb6f91eb3d9442eca3b85bdb1a20b1e.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (TestStack/Auth/UpdateCognitoCallbackUrlProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "AuthUpdateCognitoCallbackUrlFunction6078231D",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "AuthUpdateCognitoCallbackUrlProviderframeworkonEventServiceRole571A3BB1",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AuthUpdateCognitoCallbackUrlProviderframeworkonEventServiceRole571A3BB1": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AuthUpdateCognitoCallbackUrlProviderframeworkonEventServiceRoleDefaultPolicy6583B853": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "AuthUpdateCognitoCallbackUrlFunction6078231D",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "AuthUpdateCognitoCallbackUrlFunction6078231D",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AuthUpdateCognitoCallbackUrlProviderframeworkonEventServiceRoleDefaultPolicy6583B853",
        "Roles": [
          {
            "Ref": "AuthUpdateCognitoCallbackUrlProviderframeworkonEventServiceRole571A3BB1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ECSAsgCapacityProviderD5F599BD": {
      "Properties": {
        "AutoScalingGroupProvider": {
          "AutoScalingGroupArn": {
            "Ref": "ASG8C5634EF",
          },
          "ManagedTerminationProtection": "DISABLED",
        },
      },
      "Type": "AWS::ECS::CapacityProvider",
    },
    "ECSComfyUICluster424B7B27": {
      "Properties": {
        "ClusterSettings": [
          {
            "Name": "containerInsights",
            "Value": "enabled",
          },
        ],
      },
      "Type": "AWS::ECS::Cluster",
    },
    "ECSComfyUIClusterC9E01D6A": {
      "Properties": {
        "CapacityProviders": [
          {
            "Ref": "ECSAsgCapacityProviderD5F599BD",
          },
        ],
        "Cluster": {
          "Ref": "ECSComfyUICluster424B7B27",
        },
        "DefaultCapacityProviderStrategy": [],
      },
      "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
    },
    "ECSComfyUIService8BA6085B": {
      "DependsOn": [
        "ALBComfyUIALBListenerAuthenticateRuleRuleD08C6D0C",
        "ALBComfyUIALBListenerE050EC1E",
        "ECSECSTaskExecutionRoleDefaultPolicy024A96CC",
        "ECSECSTaskExecutionRole1CDB6E09",
      ],
      "Properties": {
        "CapacityProviderStrategy": [
          {
            "CapacityProvider": {
              "Ref": "ECSAsgCapacityProviderD5F599BD",
            },
            "Weight": 1,
          },
        ],
        "Cluster": {
          "Ref": "ECSComfyUICluster424B7B27",
        },
        "DeploymentConfiguration": {
          "Alarms": {
            "AlarmNames": [],
            "Enable": false,
            "Rollback": false,
          },
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 0,
        },
        "EnableECSManagedTags": false,
        "HealthCheckGracePeriodSeconds": 30,
        "LoadBalancers": [
          {
            "ContainerName": "ComfyUIContainer",
            "ContainerPort": 8181,
            "TargetGroupArn": {
              "Ref": "ECSEcsTargetGroup2FE7947E",
            },
          },
        ],
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": [
              {
                "Fn::GetAtt": [
                  "ECSServiceSecurityGroup16C4D7F8",
                  "GroupId",
                ],
              },
            ],
            "Subnets": [
              {
                "Ref": "VPCCustomVPCPrivateSubnet1Subnet87B57245",
              },
              {
                "Ref": "VPCCustomVPCPrivateSubnet2SubnetF93FDD10",
              },
            ],
          },
        },
        "SchedulingStrategy": "REPLICA",
        "TaskDefinition": {
          "Ref": "ECSTaskDef30A49FC3",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "ECSECSTaskExecutionRole1CDB6E09": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ECSECSTaskExecutionRoleDefaultPolicy024A96CC": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecr:us-west-2:000000000000:repository/cdk-hnb659fds-container-assets-000000000000-us-west-2",
                  ],
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ECSLogGroup6F5BBA07",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ECSECSTaskExecutionRoleDefaultPolicy024A96CC",
        "Roles": [
          {
            "Ref": "ECSECSTaskExecutionRole1CDB6E09",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ECSEcsTargetGroup2FE7947E": {
      "Properties": {
        "HealthCheckEnabled": true,
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckPath": "/system_stats",
        "HealthCheckPort": "8181",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 2,
        "Matcher": {
          "HttpCode": "200",
        },
        "Port": 8181,
        "Protocol": "HTTP",
        "TargetGroupAttributes": [
          {
            "Key": "stickiness.enabled",
            "Value": "false",
          },
        ],
        "TargetType": "ip",
        "UnhealthyThresholdCount": 3,
        "VpcId": {
          "Ref": "VPCCustomVPCFBCFDCBA",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "ECSLogGroup6F5BBA07": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "ECSServiceSecurityGroup16C4D7F8": {
      "Properties": {
        "GroupDescription": "Security Group for ECS Service",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": [
          {
            "Description": "Allow inbound traffic on port 8181",
            "FromPort": 8181,
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "ALBALBSecurityGroup22DDF38C",
                "GroupId",
              ],
            },
            "ToPort": 8181,
          },
        ],
        "VpcId": {
          "Ref": "VPCCustomVPCFBCFDCBA",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ECSServiceSecurityGroupfromTestStackALBALBSecurityGroup0D2909678181ECDFE2DE": {
      "Properties": {
        "Description": "Load balancer to target",
        "FromPort": 8181,
        "GroupId": {
          "Fn::GetAtt": [
            "ECSServiceSecurityGroup16C4D7F8",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "ALBALBSecurityGroup22DDF38C",
            "GroupId",
          ],
        },
        "ToPort": 8181,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "ECSTaskDef30A49FC3": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-ECS2",
              "reason": "Recent aws-cdk-lib version adds 'AWS_REGION' environment variable implicitly.",
            },
          ],
        },
      },
      "Properties": {
        "ContainerDefinitions": [
          {
            "Environment": [
              {
                "Name": "AWS_REGION",
                "Value": "us-west-2",
              },
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD-SHELL",
                "curl -f http://localhost:8181/system_stats || exit 1",
              ],
              "Interval": 15,
              "Retries": 8,
              "StartPeriod": 30,
              "Timeout": 10,
            },
            "Image": {
              "Fn::Join": [
                "",
                [
                  "000000000000.dkr.ecr.us-west-2.",
                  {
                    "Ref": "AWS::URLSuffix",
                  },
                  "/cdk-hnb659fds-container-assets-000000000000-us-west-2:757429407b133334f7c03488bbfba81ebfa9c0330a3e210d15d5f44a5e8fd999",
                ],
              ],
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "ECSLogGroup6F5BBA07",
                },
                "awslogs-region": "us-west-2",
                "awslogs-stream-prefix": "comfy-ui",
              },
            },
            "MemoryReservation": 15000,
            "MountPoints": [
              {
                "ContainerPath": "/home/user/opt/ComfyUI",
                "ReadOnly": false,
                "SourceVolume": "ComfyUIVolume-0b925f9579",
              },
            ],
            "Name": "ComfyUIContainer",
            "PortMappings": [
              {
                "AppProtocol": "http",
                "ContainerPort": 8181,
                "HostPort": 8181,
                "Name": "comfyui-port-mapping",
                "Protocol": "tcp",
              },
            ],
            "ResourceRequirements": [
              {
                "Type": "GPU",
                "Value": "1",
              },
            ],
          },
        ],
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "ECSECSTaskExecutionRole1CDB6E09",
            "Arn",
          ],
        },
        "Family": "TestStackECSTaskDefB6871D9B",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "EC2",
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "ECSECSTaskExecutionRole1CDB6E09",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "DockerVolumeConfiguration": {
              "Autoprovision": true,
              "Driver": "rexray/ebs",
              "DriverOpts": {
                "size": "250",
                "volumetype": "gp3",
              },
              "Scope": "shared",
            },
            "Name": "ComfyUIVolume-0b925f9579",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "VPCCustomVPCFBCFDCBA": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/VPC/CustomVPC",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VPCCustomVPCIGW346F9D12": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/VPC/CustomVPC",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "VPCCustomVPCNatSecurityGroup8F9FDE5C": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "GroupDescription": "Security Group for NAT instances",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::GetAtt": [
                "VPCCustomVPCFBCFDCBA",
                "CidrBlock",
              ],
            },
            "Description": "Allow NAT Traffic from inside VPC",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/VPC/CustomVPC",
          },
        ],
        "VpcId": {
          "Ref": "VPCCustomVPCFBCFDCBA",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "VPCCustomVPCPrivateSubnet1DefaultRoute5D7C9E7D": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "VPCCustomVPCPublicSubnet1NatInstance6BE7AE80",
        },
        "RouteTableId": {
          "Ref": "VPCCustomVPCPrivateSubnet1RouteTable646F4046",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCCustomVPCPrivateSubnet1RouteTable646F4046": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/VPC/CustomVPC/PrivateSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "VPCCustomVPCFBCFDCBA",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCCustomVPCPrivateSubnet1RouteTableAssociationABBD86D5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "RouteTableId": {
          "Ref": "VPCCustomVPCPrivateSubnet1RouteTable646F4046",
        },
        "SubnetId": {
          "Ref": "VPCCustomVPCPrivateSubnet1Subnet87B57245",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCCustomVPCPrivateSubnet1Subnet87B57245": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.0.2.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          {
            "Key": "Name",
            "Value": "TestStack/VPC/CustomVPC/PrivateSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "VPCCustomVPCFBCFDCBA",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCCustomVPCPrivateSubnet2DefaultRoute0C76FD9A": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "VPCCustomVPCPublicSubnet2NatInstanceF6EB4650",
        },
        "RouteTableId": {
          "Ref": "VPCCustomVPCPrivateSubnet2RouteTableE6CBD426",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCCustomVPCPrivateSubnet2RouteTableAssociation7389D45F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "RouteTableId": {
          "Ref": "VPCCustomVPCPrivateSubnet2RouteTableE6CBD426",
        },
        "SubnetId": {
          "Ref": "VPCCustomVPCPrivateSubnet2SubnetF93FDD10",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCCustomVPCPrivateSubnet2RouteTableE6CBD426": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/VPC/CustomVPC/PrivateSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "VPCCustomVPCFBCFDCBA",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCCustomVPCPrivateSubnet2SubnetF93FDD10": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.0.3.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          {
            "Key": "Name",
            "Value": "TestStack/VPC/CustomVPC/PrivateSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "VPCCustomVPCFBCFDCBA",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCCustomVPCPublicSubnet1DefaultRouteA9E69F7E": {
      "DependsOn": [
        "VPCCustomVPCVPCGW0E0B6961",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VPCCustomVPCIGW346F9D12",
        },
        "RouteTableId": {
          "Ref": "VPCCustomVPCPublicSubnet1RouteTable758FB8EA",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCCustomVPCPublicSubnet1NatInstance6BE7AE80": {
      "DependsOn": [
        "VPCCustomVPCPublicSubnet1NatInstanceInstanceRoleE53F1A4B",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "AvailabilityZone": "dummy1a",
        "IamInstanceProfile": {
          "Ref": "VPCCustomVPCPublicSubnet1NatInstanceInstanceProfile31CEECB0",
        },
        "ImageId": {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61arm64C96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t4g.nano",
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "VPCCustomVPCNatSecurityGroup8F9FDE5C",
              "GroupId",
            ],
          },
        ],
        "SourceDestCheck": false,
        "SubnetId": {
          "Ref": "VPCCustomVPCPublicSubnet1SubnetE7532862",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/VPC/CustomVPC/PublicSubnet1/NatInstance",
          },
        ],
        "UserData": {
          "Fn::Base64": "#!/bin/bash
yum install iptables-services -y
systemctl enable iptables
systemctl start iptables
echo "net.ipv4.ip_forward=1" > /etc/sysctl.d/custom-ip-forwarding.conf
sudo sysctl -p /etc/sysctl.d/custom-ip-forwarding.conf
sudo /sbin/iptables -t nat -A POSTROUTING -o $(route | awk '/^default/{print $NF}') -j MASQUERADE
sudo /sbin/iptables -F FORWARD
sudo service iptables save",
        },
      },
      "Type": "AWS::EC2::Instance",
    },
    "VPCCustomVPCPublicSubnet1NatInstanceInstanceProfile31CEECB0": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "Roles": [
          {
            "Ref": "VPCCustomVPCPublicSubnet1NatInstanceInstanceRoleE53F1A4B",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "VPCCustomVPCPublicSubnet1NatInstanceInstanceRoleE53F1A4B": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/VPC/CustomVPC/PublicSubnet1/NatInstance",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "VPCCustomVPCPublicSubnet1RouteTable758FB8EA": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/VPC/CustomVPC/PublicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "VPCCustomVPCFBCFDCBA",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCCustomVPCPublicSubnet1RouteTableAssociation29A9330E": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "RouteTableId": {
          "Ref": "VPCCustomVPCPublicSubnet1RouteTable758FB8EA",
        },
        "SubnetId": {
          "Ref": "VPCCustomVPCPublicSubnet1SubnetE7532862",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCCustomVPCPublicSubnet1SubnetE7532862": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.0.0.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "TestStack/VPC/CustomVPC/PublicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "VPCCustomVPCFBCFDCBA",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCCustomVPCPublicSubnet2DefaultRoute1A566219": {
      "DependsOn": [
        "VPCCustomVPCVPCGW0E0B6961",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VPCCustomVPCIGW346F9D12",
        },
        "RouteTableId": {
          "Ref": "VPCCustomVPCPublicSubnet2RouteTable0978DA5E",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCCustomVPCPublicSubnet2NatInstanceF6EB4650": {
      "DependsOn": [
        "VPCCustomVPCPublicSubnet2NatInstanceInstanceRole65958EB5",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "AvailabilityZone": "dummy1b",
        "IamInstanceProfile": {
          "Ref": "VPCCustomVPCPublicSubnet2NatInstanceInstanceProfileB957329F",
        },
        "ImageId": {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61arm64C96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t4g.nano",
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "VPCCustomVPCNatSecurityGroup8F9FDE5C",
              "GroupId",
            ],
          },
        ],
        "SourceDestCheck": false,
        "SubnetId": {
          "Ref": "VPCCustomVPCPublicSubnet2Subnet21404B7A",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/VPC/CustomVPC/PublicSubnet2/NatInstance",
          },
        ],
        "UserData": {
          "Fn::Base64": "#!/bin/bash
yum install iptables-services -y
systemctl enable iptables
systemctl start iptables
echo "net.ipv4.ip_forward=1" > /etc/sysctl.d/custom-ip-forwarding.conf
sudo sysctl -p /etc/sysctl.d/custom-ip-forwarding.conf
sudo /sbin/iptables -t nat -A POSTROUTING -o $(route | awk '/^default/{print $NF}') -j MASQUERADE
sudo /sbin/iptables -F FORWARD
sudo service iptables save",
        },
      },
      "Type": "AWS::EC2::Instance",
    },
    "VPCCustomVPCPublicSubnet2NatInstanceInstanceProfileB957329F": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "Roles": [
          {
            "Ref": "VPCCustomVPCPublicSubnet2NatInstanceInstanceRole65958EB5",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "VPCCustomVPCPublicSubnet2NatInstanceInstanceRole65958EB5": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/VPC/CustomVPC/PublicSubnet2/NatInstance",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "VPCCustomVPCPublicSubnet2RouteTable0978DA5E": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/VPC/CustomVPC/PublicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "VPCCustomVPCFBCFDCBA",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCCustomVPCPublicSubnet2RouteTableAssociation00DF6088": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "RouteTableId": {
          "Ref": "VPCCustomVPCPublicSubnet2RouteTable0978DA5E",
        },
        "SubnetId": {
          "Ref": "VPCCustomVPCPublicSubnet2Subnet21404B7A",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCCustomVPCPublicSubnet2Subnet21404B7A": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.0.1.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "TestStack/VPC/CustomVPC/PublicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "VPCCustomVPCFBCFDCBA",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCCustomVPCS3D9630165": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "RouteTableIds": [
          {
            "Ref": "VPCCustomVPCPrivateSubnet1RouteTable646F4046",
          },
          {
            "Ref": "VPCCustomVPCPrivateSubnet2RouteTableE6CBD426",
          },
          {
            "Ref": "VPCCustomVPCPublicSubnet1RouteTable758FB8EA",
          },
          {
            "Ref": "VPCCustomVPCPublicSubnet2RouteTable0978DA5E",
          },
        ],
        "ServiceName": {
          "Fn::Join": [
            "",
            [
              "com.amazonaws.",
              {
                "Ref": "AWS::Region",
              },
              ".s3",
            ],
          ],
        },
        "VpcEndpointType": "Gateway",
        "VpcId": {
          "Ref": "VPCCustomVPCFBCFDCBA",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VPCCustomVPCVPCGW0E0B6961": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-EC28",
              "reason": "NAT Instance does not require autoscaling.",
            },
            {
              "id": "AwsSolutions-EC29",
              "reason": "NAT Instance does not require autoscaling.",
            },
          ],
        },
      },
      "Properties": {
        "InternetGatewayId": {
          "Ref": "VPCCustomVPCIGW346F9D12",
        },
        "VpcId": {
          "Ref": "VPCCustomVPCFBCFDCBA",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "VPCFlowLog260B0A6D": {
      "Properties": {
        "DeliverLogsPermissionArn": {
          "Fn::GetAtt": [
            "VPCFlowLogIAMRole5B117089",
            "Arn",
          ],
        },
        "LogDestinationType": "cloud-watch-logs",
        "LogGroupName": {
          "Ref": "VPCFlowLogLogGroup03CD7A70",
        },
        "ResourceId": {
          "Ref": "VPCCustomVPCFBCFDCBA",
        },
        "ResourceType": "VPC",
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/VPC/FlowLog",
          },
        ],
        "TrafficType": "ALL",
      },
      "Type": "AWS::EC2::FlowLog",
    },
    "VPCFlowLogIAMRole5B117089": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "vpc-flow-logs.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/VPC/FlowLog",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "VPCFlowLogIAMRoleDefaultPolicyC7E244A8": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "VPCFlowLogLogGroup03CD7A70",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "VPCFlowLogIAMRole5B117089",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "VPCFlowLogIAMRoleDefaultPolicyC7E244A8",
        "Roles": [
          {
            "Ref": "VPCFlowLogIAMRole5B117089",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "VPCFlowLogLogGroup03CD7A70": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 731,
        "Tags": [
          {
            "Key": "Name",
            "Value": "TestStack/VPC/FlowLog",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
